# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attachment {
  _id: ID
  attachmentId: String
  contentId: String
  contentType: String
  isInline: Boolean
  message: Message
  name: String
  size: Float
  uri: String
}

type Body {
  content: String
  contentType: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EmailAddress {
  address: String
  name: String
}

input Filters {
  from: String
  subject: String
  to: String
}

input FindPeopleArgs {
  text: String
}

type Geography {
  _id: ID
  timezone: String
}

input GetEmailAttachmentsArgs {
  id: String
}

input GetEmailDataArgs {
  itemId: String
}

input GetMailsArgs {
  endCursor: String
  onlyRead: Boolean
  scope: String
  searchTerm: String
}

input GetProfilePictureArgs {
  principalName: String
}

enum Importance {
  high
  low
  normal
}

type InlineAttachment {
  contentBytes: String
  contentId: String
  contentType: String
}

type License {
  name: String
  type: String
}

type MailFolder {
  displayName: String
  id: ID
  parentFolderId: String
  totalItemCount: Int
  unreadItemCount: Int
  wellKnownName: String
}

type MailPerson {
  address: String
  html: String
  name: String
}

type MailQuery {
  isAuthorized: Boolean
  pageInfo: PageInfo
  results: [Message]
}

type Message {
  _id: ID
  attachments: [Attachment]
  bccRecipients: [Recipient]
  body: Body
  bodyPreview: String
  ccRecipients: [Recipient]
  conversationId: String
  conversationIndex: String
  createdDateTime: DateTime
  dismissed: Boolean
  from: Recipient
  hasAttachments: Boolean
  importance: Importance
  internetMessageId: String
  isDraft: Boolean
  isRead: Boolean
  isRoot: Boolean
  lastModifiedDateTime: DateTime
  mailboxId: String
  messageId: String
  parentFolder: String
  parentFolderId: String
  receivedDateTime: DateTime
  replyTo: [Recipient]
  sender: Recipient
  sentDateTime: DateTime
  subject: String
  team: Team
  teamId: String
  toRecipients: [Recipient]
  webLink: String
}

type Mutation {
  addMemberToOrganization(args: addMemberToOrganizationInput): OrganizationMember
  addMemberToTeam(args: addUserToTeamInput): TeamMember
  createMessage(args: createMessagesInput): Message
  createOrganization(args: createOrganizationInput): Organization
  createTeam(args: createTeamInput): Team
  removeMemberFromOrganization(args: addMemberToOrganizationInput): OrganizationMember
  removeMemberFromTeam(args: removeUserFromTeamInput): TeamMember
  updateOrganization(args: updateOrganizationInput): Organization
  updateTeam(args: updateTeamInput): Team
}

type Organization {
  _id: ID
  base64logo: String
  license: License
  name: String
}

type OrganizationMember {
  _id: ID
  organization: Organization
  role: String
  user: User
}

type OrganizationMemberOutput {
  organization: Organization
  role: String
  user: User
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type ProfilePicture {
  base64ByteArray: String
  principalName: ID
}

type Query {
  findPeople(args: FindPeopleArgs): [MailPerson]
  getAttachments(args: getAttachmentsInput): [Attachment]
  getDismissedMessages: [Message]
  getEmailAttachments(args: GetEmailAttachmentsArgs): [InlineAttachment]
  getEmailById(args: GetEmailDataArgs): Message
  getFolders: [MailFolder]
  getMails(args: GetMailsArgs): MailQuery
  getMessage(args: getMessagesInput): Message
  getOrganization(args: getOrganizationInput): Organization
  getOrganizationMembers(args: getOrganizationMembersInput): [OrganizationMemberOutput]
  getOrganizationTeams(args: getOrganizationTeamsInput): [Team]
  getOrganizationsTeams(args: getOrganizationsTeamsInput): [Team]
  getProfilePicture(args: GetProfilePictureArgs): ProfilePicture
  getTeam(args: getTeamInput): Team
  getTeamMembers(args: getTeamMembersInput): [TeamMemberOutput]
  getTeamRootMessages(args: getTeamRootMessagesInput): getTeamRootMessagesOutput
  getUser(args: getUserInput): User
  getUserOrganizations(args: getUserOrganizationsInput): [OrganizationMemberOutput]
}

type Recipient {
  emailAddress: EmailAddress
}

type Team {
  _id: ID
  name: String
  organization: Organization
}

type TeamMember {
  _id: ID
  role: String
  team: Team
  user: User
}

type TeamMemberOutput {
  role: String
  team: Team
  user: User
}

type User {
  _id: ID
  email: String
  firstName: String
  geography: Geography
  lastAccess: DateTime
  lastName: String
  redirectUri: String
  refreshToken: String
  tenantId: String
  token: String
  tokenExpiration: DateTime
  uniqueIds: [String]
  userId: String
}

input addMemberToOrganizationInput {
  organizationObjectId: String
  userObjectId: String
}

input addUserToTeamInput {
  teamObjectId: String
  userObjectId: String
}

input createMessagesInput {
  body: String
  messageId: String
  teamId: String
}

input createOrganizationInput {
  organizationName: String
  userObjectId: String
}

input createTeamInput {
  organizationObjectId: String
  teamName: String
  userObjectId: String
}

input getAttachmentsInput {
  messageId: String
}

input getMessagesInput {
  messageObjectId: String
}

input getOrganizationInput {
  organizationObjectId: String
}

input getOrganizationMembersInput {
  organizationObjectId: String
  role: String
}

input getOrganizationTeamsInput {
  organizationObjectId: String
}

input getOrganizationsTeamsInput {
  organizationObjectIds: [String]
}

input getTeamInput {
  teamObjectId: String
}

input getTeamMembersInput {
  role: String
  teamObjectId: String
}

input getTeamRootMessagesInput {
  filters: Filters
  limit: Float
  searchText: String
  skip: Float
  teamObjectId: String
}

type getTeamRootMessagesOutput {
  endCursor: Float
  hasNextPage: Boolean
  page: Float
  records: [Message]
  total: Float
}

input getUserInput {
  userObjectId: String
}

input getUserOrganizationsInput {
  role: String
  userObjectId: String
}

input removeUserFromTeamInput {
  teamObjectId: String
  userObjectId: String
}

input updateOrganizationInput {
  organizationName: String
  organizationObjectId: String
}

input updateTeamInput {
  organizationObjectId: String
  teamName: String
  teamObjectId: String
}
